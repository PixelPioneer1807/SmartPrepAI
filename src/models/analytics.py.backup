import json
from typing import Dict, Any, Optional
from .database import Database
from datetime import datetime

class AnalyticsManager:
    def __init__(self):
        self.db = Database()
    
    def track_event(self, user_id: int, session_id: Optional[int], 
                   event_type: str, event_data: Dict[str, Any] = None):
        """Track analytics event"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO analytics (user_id, session_id, event_type, event_data)
            VALUES (?, ?, ?, ?)
        ''', (
            user_id,
            session_id,
            event_type,
            json.dumps(event_data) if event_data else None
        ))
        
        conn.commit()
        conn.close()
    
    def get_user_analytics(self, user_id: int) -> Dict[str, Any]:
        """Get comprehensive user analytics"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        # Total quizzes and average score
        cursor.execute('''
            SELECT COUNT(*), AVG(score), MAX(score), MIN(score)
            FROM quiz_sessions WHERE user_id = ?
        ''', (user_id,))
        total_quizzes, avg_score, max_score, min_score = cursor.fetchone()
        
        # Performance by difficulty
        cursor.execute('''
            SELECT difficulty, COUNT(*), AVG(score)
            FROM quiz_sessions WHERE user_id = ?
            GROUP BY difficulty
        ''', (user_id,))
        difficulty_stats = cursor.fetchall()
        
        # Performance by topic
        cursor.execute('''
            SELECT topic, COUNT(*), AVG(score)
            FROM quiz_sessions WHERE user_id = ?
            GROUP BY topic
            ORDER BY COUNT(*) DESC
            LIMIT 5
        ''', (user_id,))
        topic_stats = cursor.fetchall()
        
        # Recent activity (last 7 days)
        cursor.execute('''
            SELECT DATE(created_at) as date, COUNT(*), AVG(score)
            FROM quiz_sessions 
            WHERE user_id = ? AND created_at >= date('now', '-7 days')
            GROUP BY DATE(created_at)
            ORDER BY date DESC
        ''', (user_id,))
        recent_activity = cursor.fetchall()
        
        conn.close()
        
        return {
            'total_quizzes': total_quizzes or 0,
            'avg_score': avg_score or 0.0,
            'max_score': max_score or 0.0,
            'min_score': min_score or 0.0,
            'difficulty_stats': difficulty_stats,
            'topic_stats': topic_stats,
            'recent_activity': recent_activity
        }
