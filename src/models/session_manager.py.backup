import json
from typing import Dict, List, Optional
from .database import Database
from datetime import datetime

class SessionManager:
    def __init__(self):
        self.db = Database()
    
    def save_quiz_session(self, user_id: int, quiz_data: Dict) -> int:
        """Save quiz session to database"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                INSERT INTO quiz_sessions (
                    user_id, topic, sub_topic, question_type, difficulty, 
                    num_questions, questions_data, user_answers, correct_answers, 
                    score, completion_time
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', [  # Changed to list
                user_id,
                quiz_data.get('topic'),
                quiz_data.get('sub_topic'),
                quiz_data.get('question_type'),
                quiz_data.get('difficulty'),
                quiz_data.get('num_questions'),
                json.dumps(quiz_data.get('questions', [])),
                json.dumps(quiz_data.get('user_answers', [])),
                json.dumps(quiz_data.get('correct_answers', [])),
                quiz_data.get('score', 0.0),
                quiz_data.get('completion_time', 0)
            ])
            
            session_id = cursor.lastrowid
            conn.commit()
            conn.close()
            
            return session_id
            
        except Exception as e:
            print(f"Session save error: {e}")  # Debug print
            conn.close()
            return None
    
    def get_user_sessions(self, user_id: int, limit: int = 10) -> List[Dict]:
        """Get user's previous quiz sessions"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT id, topic, sub_topic, question_type, difficulty, 
                       num_questions, score, created_at
                FROM quiz_sessions 
                WHERE user_id = ?
                ORDER BY created_at DESC
                LIMIT ?
            ''', [user_id, limit])  # Changed to list
            
            sessions = []
            for row in cursor.fetchall():
                sessions.append({
                    'id': row[0],
                    'topic': row[1],
                    'sub_topic': row[2],
                    'question_type': row[5],
                    'difficulty': row[3],
                    'num_questions': row[4],
                    'score': row[6] or 0.0,
                    'created_at': row[7]
                })
            
            conn.close()
            return sessions
            
        except Exception as e:
            print(f"Get sessions error: {e}")  # Debug print
            conn.close()
            return []
    
    def get_session_details(self, session_id: int) -> Optional[Dict]:
        """Get detailed session data"""
        conn = self.db.get_connection()
        cursor = conn.cursor()
        
        try:
            cursor.execute('''
                SELECT * FROM quiz_sessions WHERE id = ?
            ''', [session_id])  # Changed to list
            
            row = cursor.fetchone()
            if row:
                return {
                    'id': row[0],
                    'user_id': row[1],
                    'topic': row[2],
                    'sub_topic': row[5],
                    'question_type': row[3],
                    'difficulty': row[4],
                    'num_questions': row[6],
                    'questions_data': json.loads(row[7]) if row[7] else [],
                    'user_answers': json.loads(row[8]) if row[8] else [],
                    'correct_answers': json.loads(row[9]) if row[9] else [],
                    'score': row[10],
                    'completion_time': row[11],
                    'created_at': row[12]
                }
            
            conn.close()
            return None
            
        except Exception as e:
            print(f"Get session details error: {e}")  # Debug print
            conn.close()
            return None
